@using AslHMS.Models
@model AslHMS.Models.DTO.PharmacyDTO

@{
    ViewBag.Title = "Update";


    if (HttpContext.Current.Session["LoggedUserType"] == null)
    {
        Response.Redirect(Url.Action("Index", "Login"));
    }

    var LoggedUserTp = HttpContext.Current.Session["LoggedUserType"].ToString();
    var LoggedUserStatus = HttpContext.Current.Session["LoggedUserStatus"].ToString();
    var LoggedCompanyStatus = HttpContext.Current.Session["LoggedCompanyStatus"].ToString();

    if ((LoggedUserTp == "CompanyAdmin" || LoggedUserTp == "UserAdmin" || LoggedUserTp == "User") && LoggedUserStatus == "A" && LoggedCompanyStatus == "A")
    {

    }
    else
    {
        Response.Redirect(Url.Action("Index", "Logout"));
    }


    AslHMSApiContext db = new AslHMSApiContext();
    Int64 LoggedCompId = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedCompID"]);
    Int64 loggedUserID = Convert.ToInt64(System.Web.HttpContext.Current.Session["loggedUserID"]);

    var query = from m in db.AslRoleDbSet
                where m.COMPID == LoggedCompId && m.USERID == loggedUserID && m.CONTROLLERNAME == "SaleSaleReturnUse"
                select new { m.STATUS, m.INSERTR, m.UPDATER, m.DELETER };
    string status = "", insert = "", update = "", delete = "";
    foreach (var S in query)
    {
        status = S.STATUS;
        insert = S.INSERTR;
        update = S.UPDATER;
        delete = S.DELETER;
    }

    if (status == "I")
    {
        Response.Redirect("~/GraphView/Index");
    }


    if (update == "A")
    {

    }
    else if (insert == "A")
    {
        Response.Redirect("~/SaleSaleReturnUse/Create");
    }
    else if (delete == "A")
    {
        Response.Redirect("~/SaleSaleReturnUse/Delete");
    }

    if (update == "I")
    {
        Response.Redirect("~/GraphView/Index");
    }



    TimeZoneInfo timeZoneInfo;
    timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("Central Asia Standard Time");
    DateTime currentDateTime = TimeZoneInfo.ConvertTime(DateTime.Now, timeZoneInfo);

    List<SelectListItem> listOfType = new List<SelectListItem>();
    listOfType.Add(new SelectListItem { Text = "SALE", Value = "SALE" });
    listOfType.Add(new SelectListItem { Text = "SALE RETURN", Value = "IRTS" });
    listOfType.Add(new SelectListItem { Text = "USE", Value = "IUSE" });


    string converttoString = Convert.ToString(currentDateTime.ToString("dd-MMM-yyyy"));
    string getYear = converttoString.Substring(9, 2);
    string getMonth = converttoString.Substring(3, 3).ToUpper();
    string monthYear = getMonth + "-" + getYear;//DEC-15 (Example)

}

<link href="~/Content/bootstrap_datepicker_css/datepicker.css" rel="stylesheet" />
<link href="~/Content/bootstrap_datepicker_css/datepicker3.css" rel="stylesheet" />
<script src="/Scripts/bootstrap-datepicker.js"></script>

<script src="~/Content/SweetAlert/sweetalert.min.js"></script>
<link href="~/Content/SweetAlert/sweetalert.css" rel="stylesheet" />

<link href="~/Content/newcss/ng-grid.css" rel="stylesheet" />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div id="contentHeaderBox">
        @if (TempData["Sale/SaleReturn/Use-Update"] != "")
        {
            <h1 style="padding-left: 16px">Update Sale/Sale-Return/Use Info <span style="color: #FB000A; float: right;">@TempData["Sale/SaleReturn/Use-Update"]</span></h1>

        }
        else
        {

            <h1 style="padding-left: 16px">Update Sale/Sale-Return/Use Info</h1>
        }


        <div class="btn-group pull-right" id="editOption">
            <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" data-hover="dropdown" aria-expanded="false">
                <i class="fa fa-cog"></i>
            </button>
            <ul class="dropdown-menu pull-right" style="" role="menu">
                @if (insert == 'A'.ToString() && update == 'A'.ToString() && delete == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "SaleSaleReturnUse")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "SaleSaleReturnUse")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "SaleSaleReturnUse")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (update == 'A'.ToString() && delete == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "SaleSaleReturnUse")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "SaleSaleReturnUse")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (insert == 'A'.ToString() && update == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "SaleSaleReturnUse")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Update", "SaleSaleReturnUse")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (insert == 'A'.ToString() && delete == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "SaleSaleReturnUse")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                    <li>
                        <a href="@Url.Action("Delete", "SaleSaleReturnUse")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
                else if (insert == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Create", "SaleSaleReturnUse")"><i class="fa fa-plus"></i> Create</a>
                    </li>
                }
                else if (update == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Update", "SaleSaleReturnUse")"><i class="fa fa-edit"></i> Update</a>
                    </li>
                }
                else if (delete == 'A'.ToString())
                {
                    <li>
                        <a href="@Url.Action("Delete", "SaleSaleReturnUse")"><i class="fa fa-times"></i> Delete</a>
                    </li>
                }
            </ul>
        </div>
    </div>


    <div class="col-md-12">
        <div class="form-group">
            @Html.HiddenFor(model => model.COMPID, new { id = "txtcompid", @Value = LoggedCompId })
            @Html.HiddenFor(model => model.INSUSERID, new { id = "txtInsertUserid", @Value = loggedUserID })
            @Html.HiddenFor(model => model.Insert, new { id = "txt_Insertid", @Value = insert })
            @Html.HiddenFor(model => model.Update, new { id = "txt_Updateid", @Value = update })
            @Html.HiddenFor(model => model.Delete, new { id = "txt_Deleteid", @Value = delete })

            @Html.HiddenFor(model => model.TRANSMY, new { id = "hiddentxt_TransMonthYear", @Value = monthYear, required = "true" })
            @*@Html.HiddenFor(model => model.TRANSDT, new { id = "hiddentxt_TransactionDate", required = "true" })*@
            @Html.HiddenFor(model => model.DEPT_FR_TO, new { id = "hiddentxt_DepartmentFromTO", })
            @*@Html.HiddenFor(model => model.PATIENTYYID, new { id = "hiddentxt_PatientYearID", required = "true" })*@
            @Html.HiddenFor(model => model.PATIENTYY, new { id = "hiddentxt_PatientYear", required = "true" })
            @Html.HiddenFor(model => model.INSLTUDE, new { id = "latlon" })
            <input id="lat" type="hidden" />
            <input id="lon" type="hidden" />

            <div ng-app="SaleSaleReturnUseApp" data-ng-controller="ApiSaleSaleReturnUseController">

                <div class="row">
                    <div class="col-md-12">
                        <div class="panel panel-primary" style="border: 1px solid transparent; border-radius: 0px; border-color: #e8e8e8; box-shadow: 0px 3px 9px #888888;">
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <tr>
                                        <td style="width: 5%"><label>Type</label></td>
                                        <td style="width: 15%">@Html.DropDownListFor(model => model.TRANSTP, listOfType, new { id = "transactionType", @class = "form-control input-sm", @tabindex = "1", autofocus = "true", })</td>
                                        <td style="width: 5%"><label >Date</label></td>
                                        <td style="width: 15%">@Html.TextBoxFor(model => model.TRANSDT, new { id = "transactionDate", @class = "form-control input-sm", @Value = currentDateTime.ToString("dd-MMM-yyyy"), @tabindex = "2", required = "true" })</td>
                                        <td style="width: 8%"><label >Memo No</label></td>
                                        <td style="width: 12%">@Html.TextBoxFor(model => model.TRANSNO, new { id = "transNO", @class = "form-control input-sm", @tabindex = "3", required = "true" })</td>
                                        <td style="width: 10%"><label >Patient-Type</label></td>
                                        <td style="width: 15%">@Html.TextBoxFor(model => model.PATIENTTP, new {id = "patientType", @class = "form-control input-sm", @tabindex = "-1", @readonly = "true"})</td>
                                        <td style="width: 15%">@Html.TextBoxFor(model => model.PATIENTID, new { id = "patientId", @class = "form-control input-sm", @tabindex = "-1", required = "true", @readonly = "true", })</td>
                                    </tr>
                                    @*<tr>
                                        <td class="col-sm-1"><label>Type</label></td>
                                        <td class="col-sm-2">@Html.DropDownListFor(model => model.TRANSTP, listOfType, new { id = "transactionType", @class = "form-control input-sm", @tabindex = "1", autofocus = "true", @style="width: 80%;" })</td>
                                        <td class="col-sm-1"><label style="margin-left: -21px;">Date</label></td>
                                        <td class="col-sm-2">@Html.TextBoxFor(model => model.TRANSMY_Update, new { id = "transaction_MonthYear_Update", @class = "form-control input-sm", @Value = currentDateTime.ToString("MMM-yyyy"), @Style = "width:  60%;    margin-left: -26px;", @tabindex = "2", required = "true" })</td>
                                        <td class="col-sm-1"><label style="margin-left: -89px;">Memo No</label></td>
                                        <td class="col-sm-2">@Html.TextBoxFor(model => model.TRANSNO, new { id = "transNO", @class = "form-control input-sm", @tabindex = "3", required = "true", @Style = "margin-left: -90px;" })</td>
                                        <td class="col-sm-2"><label style="margin-left: -89px;">Patient-Type</label></td>
                                        <td class="col-sm-2">@Html.TextBoxFor(model => model.PATIENTTP, new { id = "patientType", @class = "form-control input-sm", @Style = "width: 251%;margin-left: -153px;", @tabindex = "-1", @readonly = "true" })</td>
                                    </tr>*@
                                </table>
                                <table class="table table-striped">
                                    <tr>
                                        <td style="width: 13%">@Html.LabelFor(model => model.DEPT_FR_TO, htmlAttributes: new { id = "LevelDepartment", @class = "control-label" })</td>
                                        <td style="width: 27%">@Html.TextBoxFor(model => model.DepartmentName, new { id = "departmentName", @class = "form-control input-sm", @tabindex = "-1", @readonly = "true", })</td>
                                        <td style="width: 8%"><label>Patient ID</label></td>
                                        <td style="width: 12%">@Html.TextBoxFor(model => model.PATIENTYYID, new { id = "hiddentxt_PatientYearID", @class = "form-control input-sm", @tabindex = "-1", required = "true", @readonly = "true", })</td>
                                        <td style="width: 10%"><label>Patient Name</label></td>
                                        <td style="width: 30%">@Html.TextBoxFor(model => model.PatientName, new { id = "patientName", @class = "form-control input-sm", @readonly = "true", @tabindex = "-1", required = "true" })</td>
                                    </tr>
                                    @*<tr>
                                        <td class="col-sm-2">@Html.LabelFor(model => model.DEPT_FR_TO, htmlAttributes: new { id = "LevelDepartment", @class = "control-label" })</td>
                                        <td class="col-sm-3">@Html.TextBoxFor(model => model.DepartmentName, new { id = "departmentName", @class = "form-control input-sm", @tabindex = "-1", @readonly = "true", })</td>
                                        <td class="col-sm-1"><label>Patient ID</label></td>
                                        <td class="col-sm-2">@Html.TextBoxFor(model => model.PATIENTID, new { id = "patientId", @class = "form-control input-sm", @tabindex = "-1", required = "true", @readonly = "true", })</td>
                                        <td class="col-sm-2"><label>Patient Name</label></td>
                                        <td class="col-sm-3">@Html.TextBoxFor(model => model.PatientName, new { id = "patientName", @class = "form-control input-sm", @readonly = "true", @tabindex = "-1", required = "true" ,@Style = "width: 135%;margin-left: -66px;" })</td>
                                    </tr>*@
                                </table>

                                <table class="table table-striped" id="searchbutton_divid">
                                    <tr>
                                        <td class="col-sm-10"></td>
                                        <td class="col-sm-02"><input id="SearchButtonID" type="submit" value="Search" data-ng-click="search($event)" class="btn btn-info" tabindex="4"/></td>
                                    </tr>
                                </table>                     
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row" id="Get_Sale_SaleReturn_Use_Info">
                    <div class="col-md-9">
                        <div class="well" style="box-shadow: 0px 3px 9px #888888;">
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <tr>
                                        <td class="col-md-6"><label>Item Name</label></td>
                                        <td class="col-md-2"><label>Qty</label>
                                        <td class="col-md-2"><label>Rate</label></td>
                                        <td class="col-md-2"><label>Amount</label></td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        @Html.HiddenFor(model => model.MEDIID, new { id = "hiddentxt_MEDIID", @data_ng_model = "newChild.MEDIID" })
                                        <td class="col-md-6"><input type="text" class="form-control input-sm" data-ng-model="newChild.MEDINM" id="itemName_MEDIname" tabindex="5" /></td>
                                        <td class="col-md-2"><input type="number" step="any" class="form-control input-sm" data-ng-model="newChild.QTY" id="qty" min="0" max="999999999999999" placeholder="0" tabindex="6" /></td>
                                        <td class="col-md-2"><input type="number" step="any" class="form-control input-sm" data-ng-model="newChild.RATE" id="rate" min="0" max="999999999999999" placeholder="0" tabindex="7" /></td>
                                        <td class="col-md-2"><input type="number" step="any" class="form-control input-sm" data-ng-model="newChild.AMOUNT" id="amount" min="0" max="999999999999999" placeholder="0" readonly="readonly" tabindex="-1" /></td>
                                        <td><input type="submit" value="Insert" data-ng-click="addrow($event)" class="btn btn-primary" id="btnInsert" tabindex="9" /></td>
                                    </tr>
                                </table>
                                <table class="table table-striped">
                                    <tr>
                                        <td @*class="col-md-1"*@ style="text-align: left; width: 5%"><label>SL</label></td>
                                        <td @*class="col-md-5"*@ style="text-align: left; width: 50%"><label>Item Name</label></td>
                                        <td @*class="col-md-1"*@ style="text-align: left; width: 10%"><label>Qty</label></td>
                                        <td @*class="col-md-1"*@ style="text-align: left; width: 10%"><label>Rate</label></td>
                                        <td @*class="col-md-2"*@ style="text-align: right; width: 15%"><label>Amount</label></td>
                                        <td @*class="col-md-2"*@ style="width: 10%"></td>
                                    </tr>
                                    <tr data-ng-repeat="testitem in SaleSaleReturnUseData">
                                        <td hidden>
                                            <p data-ng-hide="testitem.editMode">{{testitem.ID}}</p>
                                        </td>
                                        <td hidden>
                                            <p data-ng-hide="testitem.editMode">{{testitem.COMPID}}</p>
                                        </td>
                                        <td hidden>
                                            <p data-ng-hide="testitem.editMode">{{ testitem.TRANSTP }}</p>
                                        </td>
                                        <td hidden>
                                            <p data-ng-hide="testitem.editMode">{{ testitem.TRANSMY }}</p>
                                        </td>
                                        <td hidden>
                                            <p data-ng-hide="testitem.editMode">{{ testitem.TRANSNO }}</p>
                                        </td>
                                        <td hidden>
                                            <p data-ng-hide="testitem.editMode">{{ testitem.MEDIID }}</p>
                                        </td>

                                        <td @*class="col-md-1"*@ style="width: 5%">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.ITEMSL }}</p>
                                            <input class="form-control input-sm" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.ITEMSL" id="gridItemSLid" readonly="readonly" />
                                        </td>
                                        <td @*class="col-md-5"*@ style="width: 50%">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.MEDINM }}</p>
                                            <input class="form-control input-sm" data-ng-show="testitem.editMode" type="text" data-ng-model="testitem.MEDINM" id="gridMediNameID" readonly="readonly" />
                                        </td>
                                        <td @*class="col-md-1"*@ style="width: 10%">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.QTY }}</p>
                                            @Html.TextBoxFor(model => model.QTY, new { type = "number", step = "any", id = "gridQtyID", data_ng_show = "testitem.editMode", data_ng_model = "testitem.QTY", @class = "form-control input-sm gridQty", ng_change = "quantity(testitem.QTY)", @min = "0", @max = "999999999999999", placeholder = "0" })
                                            @*<input type="number" data-ng-model="testitem.QTY" class="form-control input-sm gridQty" data-ng-show="testitem.editMode"  ng-chance="quantity(testitem.QTY)" min="0" max="999999999999999" placeholder="0" />*@
                                        </td>
                                        <td @*class="col-md-1"*@ style="width: 10%">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.RATE }}</p>
                                            @Html.TextBoxFor(model => model.RATE, new { type = "number", step = "any", id = "gridRateID", data_ng_show = "testitem.editMode", data_ng_model = "testitem.RATE", @class = "form-control input-sm gridRate", ng_change = "rate(testitem.RATE)", @min = "0", @max = "999999999999999", placeholder = "0" })
                                            @*<input class="form-control input-sm gridRate" data-ng-show="testitem.editMode" type="number" data-ng-model="testitem.RATE" id="gridRateID" min="0" max="999999999999999" placeholder="0" ng-chance="rate(testitem.RATE)" />*@
                                        </td>
                                        <td @*class="col-md-2"*@ style="text-align: right; width: 15%">
                                            <p data-ng-hide="testitem.editMode">{{ testitem.AMOUNT }}</p>
                                            @*@Html.TextBoxFor(model => model.AMOUNT, new { type = "number", id = "gridAmountID", data_ng_show = "testitem.editMode", data_ng_model = "testitem.AMOUNT", @class = "form-control input-sm gridAmount", ng_change = "amount(testitem.AMOUNT)", @min = "0", @max = "999999999999999", placeholder = "0" })*@
                                            <input class="form-control input-sm gridAmount" data-ng-show="testitem.editMode" type="number" step="any" data-ng-model="testitem.AMOUNT" id="gridAmountID" min="0" max="999999999999999" placeholder="0" ng-chance="amount(testitem.AMOUNT)" readonly="readonly" />
                                        </td>
                                        <td @*class="col-md-2"*@ style="text-align: right; width: 10%">
                                            <p data-ng-hide="testitem.editMode">
                                                <a data-ng-click="toggleEdit(testitem)" href="javascript:;"><span class="btn btn-warning btn-xs glyphicon glyphicon-edit"></span></a> @*| <a data-ng-click="deleteItem(testitem)" href="javascript:;"><span class="btn btn-warning btn-xs glyphicon glyphicon-trash"></span></a>*@
                                            </p>
                                            <p data-ng-show="testitem.editMode">
                                                <a data-ng-click="update(testitem)" href="javascript:;"><span class="btn btn-warning btn-xs glyphicon glyphicon-ok"></span></a> | <a data-ng-click="toggleEdit_Cancel(testitem)" href="javascript:;"><span class="btn btn-warning btn-xs glyphicon glyphicon-remove"></span></a>
                                            </p>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td @*class="col-md-1"*@ style="width: 5%"></td>
                                        <td @*class="col-md-5"*@ style="width: 50%"></td>
                                        <td @*class="col-md-1"*@ style="width: 10%"></td>
                                        <td @*class="col-md-1"*@ style="width: 10%"><b>Total:</b></td>
                                        <td @*class="col-md-2"*@ id="gridTotalAmount" style="text-align: right; font-weight: bold; width: 15%">{{GetSummOfAmount(SaleSaleReturnUseData)}}</td>
                                        <td @*class="col-md-2"*@ style="width: 10%"></td>
                                    </tr>
                                </table>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3" style="padding-left: 0px;">
                        <div class="panel panel-primary" style="margin-bottom: 0px">
                            <div class="panel-heading">Payment Information</div>
                        </div>

                        <div class="well">
                            <div class="row">
                                <div class="col-md-12">Total Amount</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">@Html.TextBoxFor(model => model.TOTAMT, new { @class = "form-control input-sm", @style = "text-align:right", id = "txtMst_TotalAmount", @readonly = "readonly", @Value = 0 })</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">Vat (%)</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">@Html.TextBoxFor(model => model.VATRT, new { type = "number", step = "any", @class = "form-control input-sm", @style = "text-align:right", id = "txtMst_VatRT", @Value = 0, tabindex = "10" })</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">Vat Amount</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">@Html.TextBoxFor(model => model.VATAMT, new { @class = "form-control input-sm", @style = "text-align:right", id = "txtMst_VatAmount", @Value = 0, @readonly = "readonly" })</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">Discount</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">@Html.TextBoxFor(model => model.DISCOUNT, new { type = "number", step = "any", @class = "form-control input-sm", @style = "text-align:right", id = "txtMst_DiscAmt", @Value = 0, tabindex = "11" })</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">Net Amount</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">@Html.TextBoxFor(model => model.NETAMT, new { @class = "form-control input-sm", @style = "text-align:right", id = "txtMst_NetAmount", @Value = 0, @readonly = "readonly" })</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">Remarks</div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">@Html.TextAreaFor(model => model.REMARKS, new { @class = "form-control input-sm", @style = "text-align:left", id = "txtMst_Remarks", tabindex = "12" })</div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-md-6"><input type="submit" id="btnSave" class="btn btn-success btn-block" value="Save" name="command" tabindex="13" /></div>
                                <div class="col-md-6"><input type="submit" id="btnRefresh" class="btn btn-danger btn-block" value="Refresh" name="command" tabindex="14" /></div>
                            </div>
                            <div class="row">
                                <div class="col-md-6"><input type="submit" id="A4_ButtonId" class="btn btn-default btn-block" name="command" value="A4" data-toggle="tooltip" data-placement="bottom" title="Paper size A4" formtarget="_blank" tabindex="15" /></div>
                                <div class="col-md-6"><input type="submit" id="POS_ButtonId" class=" btn btn-default btn-block" name="command" value="POS" data-toggle="tooltip" data-placement="bottom" title="Paper size small" formtarget="_blank" tabindex="16" /></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>


    //Latitute & longitude
    <script src="http://maps.google.com/maps/api/js?sensor=false"></script>

    <script language="javascript" type="text/javascript">
        $(function () {
            navigator.geolocation.getCurrentPosition(showPosition);

            //navigator.geolocation.getCurrentPosition(showPosition, positionError);

            function showPosition(position) {
                var coordinates = position.coords;
                $("#lat").val(coordinates.latitude);
                $("#lon").val(coordinates.longitude);

                $("#latlon").val(
                    $("#lat").val() + "," + $("#lon").val()
                );
            }
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {

            //Grid and card level Field
            $('#Get_Sale_SaleReturn_Use_Info').hide();
            $('#SearchButtonID').click(function () {
                var patientName = $('#patientName').val();
                if (patientName != "") {
                    $('#Get_Sale_SaleReturn_Use_Info').show();
                    $('#searchbutton_divid').hide();

                    //Disabled required field when select insert button.
                    $("#transactionType").prop("disabled", true);
                    $("#transactionDate").prop("disabled", true);
                    $("#transNO").prop("disabled", true);
                }
            });


            //right before the form submits, we re-enable the fields, to make them submit.
            $("#btnSave").click(function () {
                $('#transactionType').prop("disabled", false);
                $('#transactionDate').prop("disabled", false);
                $('#transNO').prop("disabled", false);
            });


            //$("#btnRefresh").click(function () {
            //    window.location = "/SaleSaleReturnUse/Update";
            //});

            






            $('#LevelDepartment').text('Department From');

            $('#transactionType').change(function () {

                var changedtxt = $('#transactionType option:selected').val();
                if (changedtxt == "SALE") {
                    $('#LevelDepartment').text('Department From');
                } else if (changedtxt == "IRTS") {
                    $('#LevelDepartment').text('Department To');
                } else if (changedtxt == "IUSE") {
                    $('#LevelDepartment').text('Department From');
                }

                $("#transNO").val("");
                //$("#hiddentxt_TransactionDate").val("");
                $("#hiddentxt_DepartmentFromTO").val("");
                $("#hiddentxt_PatientYearID").val("");
                $("#hiddentxt_PatientYear").val("");
                $("#patientType").val("");
                $("#departmentName").val("");
                $("#patientId").val("");
                $("#patientName").val("");
                document.getElementById("transactionDate").focus();
            });


            $("#transactionDate").datepicker({
                dateFormat: 'dd-M-yy',
                changeYear: true,
                changeMonth: true,
                onSelect: function (datetxt, instance) {
                    var changedText = $('#transactionDate').val();

                    var monthYear = document.getElementById('hiddentxt_TransMonthYear');
                    $("#txtYear").val(" ");
                    $.getJSON(
                        "/SaleSaleReturnUse/GetMonthYear", { "ChangedText": changedText },
                        function (myData) {
                            monthYear.value = myData.TRANSMY;
                        });

                    $("#transNO").val("");
                    //$("#hiddentxt_TransactionDate").val("");
                    $("#hiddentxt_DepartmentFromTO").val("");
                    $("#hiddentxt_PatientYearID").val("");
                    $("#hiddentxt_PatientYear").val("");
                    $("#patientType").val("");
                    $("#departmentName").val("");
                    $("#patientId").val("");
                    $("#patientName").val("");

                    document.getElementById("transNO").focus();
                }
            });


            //$('#transaction_MonthYear_Update').datepicker({
            //    changeMonth: true,
            //    changeYear: true,
            //    showButtonPanel: true,
            //    dateFormat: 'M-yy'
            //}).focus(function () {
            //    var thisCalendar = $(this);
            //    $('.ui-datepicker-calendar').detach();
            //    $('.ui-datepicker-close').click(function () {
            //        var month = $("#ui-datepicker-div .ui-datepicker-month :selected").val();
            //        var year = $("#ui-datepicker-div .ui-datepicker-year :selected").val();
            //        thisCalendar.datepicker('setDate', new Date(year, month, 1));

            //        $("#transNO").val("");
            //        //$("#hiddentxt_TransactionDate").val("");
            //        $("#hiddentxt_DepartmentFromTO").val("");
            //        $("#hiddentxt_PatientYearID").val("");
            //        $("#hiddentxt_PatientYear").val("");
            //        $("#patientType").val("");
            //        $("#departmentName").val("");
            //        $("#patientId").val("");
            //        $("#patientName").val("");

            //        var changedText = $('#transaction_MonthYear_Update').val();

            //        var monthYear = document.getElementById('hiddentxt_TransMonthYear');
            //        $("#txtYear").val(" ");
            //        $.getJSON(
            //            "/SaleSaleReturnUse/GetMonthYear", { "ChangedText": changedText },
            //            function (myData) {
            //                monthYear.value = myData.TRANSMY;
            //            });
            //    });
            //});


          
            //MemoNO Field
            $('#transNO').autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/SaleSaleReturnUse/TagSearch_transNO',
                        type: 'GET',
                        cache: false,
                        dataType: "json",
                        data: {
                            term: request.term,
                            compid: $('#txtcompid').val(),
                            transactionType: $('#transactionType option:selected').val(),
                            transactionDate: $('#transactionDate').val()
                        },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item,
                                    value: item
                                };
                            }));
                        }
                    });
                },
                change: $('#transNO').keyup(_.debounce(txtOneChangedMemoNO, 500)),
                select: function (event, ui) {
                    $("#transNO").val(ui.item.label);
                    txtOneChangedMemoNO();
                }
            });

            function txtOneChangedMemoNO() {

                var changedText = $("#transNO").val();
                var companyid = $('#txtcompid').val();
                var transactionType = $("#transactionType option:selected").val();
                var transactionDate = $('#transactionDate').val();

                var txtBox = document.getElementById('transNO');
                //var hiddentxt_TransactionDate = document.getElementById('hiddentxt_TransactionDate');
                var hiddentxt_departmentFromTO = document.getElementById('hiddentxt_DepartmentFromTO');
                var hiddentxt_PatientYearID = document.getElementById('hiddentxt_PatientYearID');
                var hiddentxt_PatientYear = document.getElementById('hiddentxt_PatientYear');
                var patientType = document.getElementById('patientType');
                var departmentName = document.getElementById('departmentName');
                var patientId = document.getElementById('patientId');
                var patientName = document.getElementById('patientName');


                if (changedText != "") {
                    $.getJSON(
                        '/SaleSaleReturnUse/keyword_GetTransNO', { "ChangedText": changedText, "Companyid": companyid, "TransactionType": transactionType, "TransactionDate": transactionDate },
                        function (myData) {
                            txtBox.value = myData.TRANSNO;
                            //hiddentxt_TransactionDate.value = myData.TRANSDT;
                            hiddentxt_departmentFromTO.value = myData.DEPT_FR_TO;
                            hiddentxt_PatientYearID.value = myData.PATIENTYYID;
                            hiddentxt_PatientYear.value = myData.PATIENTYY;
                            patientType.value = myData.PATIENTTP;
                            departmentName.value = myData.DepartmentName;
                            patientId.value = myData.PATIENTID;
                            patientName.value = myData.PatientName;

                        });
                }

                //$("#hiddentxt_TransactionDate").val("");
                $("#hiddentxt_DepartmentFromTO").val("");
                $("#hiddentxt_PatientYearID").val("");
                $("#hiddentxt_PatientYear").val("");
                $("#patientType").val("");
                $("#departmentName").val("");
                $("#patientId").val("");
                $("#patientName").val("");
            }


            

            // Item Name (MEDI id) Field
            $('#itemName_MEDIname').autocomplete({
                source: function (request, response) {
                    $.ajax({
                        url: '/SaleSaleReturnUse/TagSearch_MediName',
                        type: 'GET',
                        cache: false,
                        dataType: "json",
                        data: {
                            term: request.term,
                            compid: $('#txtcompid').val()
                        },
                        success: function (data) {
                            response($.map(data, function (item) {
                                return {
                                    label: item,
                                    value: item
                                };
                            }));
                        }
                    });
                },
                change: $('#itemName_MEDIname').keyup(_.debounce(txtOneChangedMediName, 500)),
                select: function (event, ui) {
                    $("#itemName_MEDIname").val(ui.item.label);
                    txtOneChangedMediName();
                }
            });


            function txtOneChangedMediName() {

                var changedText = $("#itemName_MEDIname").val();
                var companyid = $('#txtcompid').val();

                var hiddentxt_MEDIID = document.getElementById('hiddentxt_MEDIID');
                var txtBox = document.getElementById('itemName_MEDIname');
                var txtRate = document.getElementById('rate');

                if (changedText != "") {
                    $.getJSON(
                        '/SaleSaleReturnUse/keyword_GetMediName', { "ChangedText": changedText, "Companyid": companyid },
                        function (myData) {
                            hiddentxt_MEDIID.value = myData.MEDIID;
                            txtBox.value = myData.MEDINM;
                            txtRate.value = myData.SALRT;

                            var qty = document.getElementById('qty').value;
                            var rate = document.getElementById('rate').value;
                            var amount = document.getElementById('amount');

                            var tottxtAmt = (qty * rate);
                            amount.value = tottxtAmt;
                        });
                }

                $("#hiddentxt_MEDIID").val("");
                $("#rate").val("");
            }



            $("#qty").change(function () {

                var qty = document.getElementById('qty').value;
                var rate = document.getElementById('rate').value;
                var amount = document.getElementById('amount');

                var tottxtAmt = (qty * rate).toFixed(2);
                amount.value = tottxtAmt;
                document.getElementById("rate").focus();
            });




            $("#rate").change(function () {

                var qty = document.getElementById('qty').value;
                var rate = document.getElementById('rate').value;
                var amount = document.getElementById('amount');

                var tottxtAmt = (qty * rate).toFixed(2);
                amount.value = tottxtAmt;
                document.getElementById("btnInsert").focus();
            });



            $("#txtMst_VatRT").change(function () {

                document.getElementById('txtMst_VatAmount').value = (document.getElementById('txtMst_TotalAmount').value * (document.getElementById('txtMst_VatRT').value / 100)).toFixed(2);
                document.getElementById('txtMst_NetAmount').value = (parseFloat(document.getElementById('txtMst_TotalAmount').value) + parseFloat(document.getElementById('txtMst_VatAmount').value) - parseFloat(document.getElementById('txtMst_DiscAmt').value)).toFixed(2);
                document.getElementById("txtMst_DiscAmt").focus();
            });



            $("#txtMst_DiscAmt").change(function () {

                document.getElementById('txtMst_VatAmount').value = (document.getElementById('txtMst_TotalAmount').value * (document.getElementById('txtMst_VatRT').value / 100)).toFixed(2);
                document.getElementById('txtMst_NetAmount').value = (parseFloat(document.getElementById('txtMst_TotalAmount').value) + parseFloat(document.getElementById('txtMst_VatAmount').value) - parseFloat(document.getElementById('txtMst_DiscAmt').value)).toFixed(2);
                document.getElementById("txtMst_Remarks").focus();
            });



            $('#A4_ButtonId').click(function () {
                $('#transactionType').prop("disabled", false);
                $('#transactionDate').prop("disabled", false);
                $('#transNO').prop("disabled", false);
                setTimeout(function () { window.location.reload(); }, 100);
            });
            $('#POS_ButtonId').click(function () {
                $('#transactionType').prop("disabled", false);
                $('#transactionDate').prop("disabled", false);
                $('#transNO').prop("disabled", false);
                setTimeout(function () { window.location.reload(); }, 100);
            });

        });
    </script>


    <style type="text/css">
        .ui-autocomplete {
            position: absolute;
            cursor: default;
            background: #f0ffff;
            max-height: 200px;
            overflow-y: auto;
            /* prevent horizontal scrollbar */
            overflow-x: hidden;
            /* add padding to account for vertical scrollbar */
            padding-right: 20px;
        }
    </style>

}


<link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
@*<script src="~/Content/jquery-2.1.4/jquery-2.1.4.min.js"></script>*@
<script src="~/Scripts/jquery-1.9.1.min.js"></script>
<script src="~/Scripts/jquery-ui-1.10.4.min.js"></script>


<script src="~/Scripts/angularjs/1.0.5/angular.js"></script>
<script src="~/Scripts/Sale_SaleReturn_Use/Sale_SaleReturn_Use_Update.js"></script>
<script src="~/Scripts/angularjs/ui-bootstrap-tpls-0.4.0.js"></script>

<script src="~/Scripts/Underscore.js"></script>